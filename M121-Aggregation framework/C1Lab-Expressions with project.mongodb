/*
Let's find how many movies in our movies collection are a "labor of love", 
where the same person appears in cast, directors, and writers

Hint: You will need to use $setIntersection operator in the aggregation pipeline 
to find out the result.

Note that your dataset may have duplicate entries for some films. 
You do not need to count the duplicate entries.

To get a count after you have defined your pipeline, there are two simple methods.

// add the $count stage to the end of your pipeline
// you will learn about this stage shortly!
db.movies.aggregate([
  {$stage1},
  {$stage2},
  {...$stageN},
  { $count: "labors of love" }
])

// or use itcount()
db.movies.aggregate([
  {$stage1},
  {$stage2},
  {...$stageN}
]).itcount()

How many movies are "labors of love"?
*/
let pipeline


// V1
pipeline = [
  // {$match: {
  //   "directors": "Quentin Tarantino"
  //   }
  // },
  // Don't know if this is necesary for the exercise
  // Removes the additional information in writers field as in:
  // "Roberto Benigni (story)" => "Roberto Benigni"
  {$project: {
    "_id" : 0,
    title:1, cast: 1, directors: 1,
    writers: {
      $map: {
        input: "$writers",
        as: "writer",
        in: {
          $arrayElemAt: [
            {
              $split: [ "$$writer", " (" ]
            },
            0
          ]
        }
      }
    }
  }},
  // Generate two new fields from the director one
  // - directorsInCast: true if $cast includes the director
  // - directorsInWriters: true if $writers includes the director
  {$project: {
    "_id" : 0,
    title:1, cast: 1, directors: 1, writers: 1,
    directorsInCast: {
      $map: {
        input: "$directors",
        as: "director",
        in: {
          $in: [ 
            "$$director", 
            "$cast" 
          ]
        } // in
      } // map
    },
    directorsInWriters: {
      $map: {
        input: "$directors",
        as: "director",
        in: {
          $in: [ 
            "$$director", 
            "$writers" 
          ]
        } // in
      } // map
    }
  }},
  // Perform an element by element "and" between directorsInCast and directorsInWriters
  {$project: {
    "_id" : 0,
    title:1, cast: 1, directors: 1, writers: 1,
    directorsInCast: 1, directorsInWriters: 1,
    directorsInCastAndWriters: {
      $map: {
        input: {"$range":[0,{$size: "$directors"}]},
        as: "i",
        in: {
          $and: [
            { $arrayElemAt: ["$directorsInCast", "$$i"] },
            { $arrayElemAt: ["$directorsInWriters","$$i"] }
          ]
        } // in
      } // map
    }
  }},
  {$project: {
    "_id" : 0,
    title:1, cast: 1, directors: 1, writers: 1,
    directorsInCast: 1, directorsInWriters: 1, directorsInCastAndWriters: 1,
    foo: {
      $reduce: {
        input: "$directorsInCastAndWriters",
        initialValue: false,
        in: {
          $or: [
            "$$value",
            "$$this"
          ]
        }
      }
    }
  }}
  // {$match: { "foo": true }}
  // { $limit: 15 }
]

// db.movies.aggregate(pipeline).itcount()
db.movies.aggregate(pipeline)


// db.movies.find({
//   "directors": "Quentin Tarantino"
// }).pretty();

/*
db.movies.find({
  writers:{
    $exists:true,
    $ne:[]
  }
}).pretty();
*/
// db.movies.find({
//   directors: "Quentin Tarantino",
//   cast: "Quentin Tarantino"
// }).pretty();
