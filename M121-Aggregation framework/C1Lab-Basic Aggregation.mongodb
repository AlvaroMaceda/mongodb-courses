/*
Help MongoDB pick a movie our next movie night! Based on employee polling, we've decided that potential movies must meet the following criteria.

    imdb.rating is at least 7
    genres does not contain "Crime" or "Horror"
    rated is either "PG" or "G"
    languages contains "English" and "Japanese"

Assign the aggregation to a variable named pipeline, like:

var pipeline = [ { $match: { ... } } ]

    As a hint, your aggregation should return 23 documents. You can verify this by typing db.movies.aggregate(pipeline).itcount()
    Download the m121/chapter1.zip handout with this lab. Unzip the downloaded folder and copy its contents to the m121 directory.
    Load validateLab1.js into mongo shell

load('validateLab1.js')

    And run the validateLab1 validation method

validateLab1(pipeline)

Correct answer: 15
*/

use aggregations;
db.movies.findOne();

var pipeline = [
    {
    $match: {
        "imdb.rating":  { "$gte" : 7 },
        "genres": { $nin: ["Crime", "Horror"] },
        rated: { $in: ["PG", "G"] },
        languages: { $all: ["English", "Japanese"] }
        }
    },
    {
    $project: { 
        "genres": 1
        }
    }
]

db.movies.aggregate(pipeline).itcount()

var validateLab1 = pipeline => {
  let aggregations = db.getSiblingDB("aggregations")
  if (!pipeline) {
    print("var pipeline isn't properly set up!")
  } else {
    try {
      var result = aggregations.movies.aggregate(pipeline).toArray().length
      let sentinel = result
      let data = 0
      while (result != 1) {
        data++
        result = result % 2 === 0 ? result / 2 : result * 3 + 1
      }
      if (sentinel === 23) {
        print("Answer is", data)
      } else {
        print("You aren't returning the correct number of documents")
      }
    } catch (e) {
      print(e.message)
    }
  }
}

validateLab1(pipeline)
